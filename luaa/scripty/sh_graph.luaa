SCRIPTY.GraphYield = {
    Node = 1,
    WaitForEvent = 2,
};

/**
    Represents a graph of nodes that can be executed.
*/
class SCRIPTY_Graph {
    var Nodes = { };
    var NodesById = { };
    var Name = "";
    var Coroutine;

    /// Number of executable node executions. Used to cache the values.
    var Executions = 0;

    var EventQueue = { };

    function Run() {
        print("Running graph");

        this.Coroutine = coroutine.create(function() {
            this:CoroutineFunc();
        });

        this:InitContexts();
        this:TriggerEvent("Events/OnStart");

        hook.Add("Think", this, function(self) {
            var keepRunning = true;

            var startTime = SysTime();
            var tickInterval = engine.TickInterval();

            while(keepRunning) {
                var elapsed = SysTime() - startTime;

                if(elapsed > tickInterval * ScriptyConfig.MaxCpuUsage)
                    return;

                var success, param = coroutine.resume(this.Coroutine);

                if(!success) {
                    print("Execution error: " .. param);
                    keepRunning = false;
                }
                else {
                    if(param == SCRIPTY.GraphYield.Node)
                        keepRunning = true;
                    else
                        keepRunning = false;
                }
            }
        });
    }

    function Stop() {
        hook.Remove("Think", this);

        foreach(var node in this.Nodes) {
            if(node.NodeTable.OnStop)
                node.NodeTable.OnStop(node.Context);
        }
    }

    function InitContexts() {
        this.Executions = 0;

        foreach(var node in this.Nodes) {
            node.Context = SCRIPTY_NodeContext(this, node);
            if(node.NodeTable.OnStart)
                node.NodeTable.OnStart(node.Context);
        }
    }

    function CoroutineFunc() {
        while(true) {
            // Execute events if there are any
            while(#this.EventQueue > 0) {
                var event = table.remove(this.EventQueue, 1);

                foreach(var name, value in event.Outputs)
                    event.Node.Context.Outputs[name] = value;

                foreach(var output in event.Node.Outputs[event.Name]) {
                    var secondNode = this.NodesById[output.Id];
                    this:TriggerExecutionInput(secondNode, output.Name);
                }
            }

            coroutine.yield(SCRIPTY.GraphYield.WaitForEvent); // Wait for events
        }
    }

    function TriggerEvent(name) {
        // print("Triggering event " .. name);

        foreach(var node in this.Nodes) {
            if(node.Name == name) {
                this:TriggerExecutionOutput(node, "triggered");
            }
        }
    }

    function TriggerExecutionOutput(node, name) {
        // print("Triggering execution output '" .. name .. "' on node " .. node.Id);

        if(!node.Outputs[name])
            return;

        // Queue if event
        if(node.NodeTable.IsEvent) {
            var event = {
                Node = node,
                Name = name,
                Outputs = { },
            };

            foreach(var name, value in node.Context.Outputs) {
                event.Outputs[name] = value;
            }

            this.EventQueue[#this.EventQueue + 1] = event;

            return;
        }

        foreach(var output in node.Outputs[name]) {
            var secondNode = this.NodesById[output.Id];
            this:TriggerExecutionInput(secondNode, output.Name);
        }
    }

    function TriggerExecutionInput(node, name) {
        coroutine.yield(SCRIPTY.GraphYield.Node);

        // print("Triggering execution input '" .. name .. "' on node " .. node.Id);

        this.Executions++;
        
        this:UpdateNodeInputs(node);
        node.NodeTable.InTriggers[name].Action(node.Context);
    }

    function UpdateNodeInputs(node) {
        var context = node.Context;

        // Don't update the node if it already was updated in this execution
        if(context.LastExecution == this.Executions)
            return;
        context.LastExecution = this.Executions;

        // print("Updating node inputs on " .. node.Id);

        foreach(var key, input in node.Inputs) {
            var value;
            
            if(input.Id) {
                var inputNode = this.NodesById[input.Id];
                this:UpdateNodeInputs(inputNode);
                value = inputNode.Context:GetOutput(input.Name);
            }
            else
                value = input.Value;

            context:SetInput(key, value);
        }

        if((!node.NodeTable.InTriggers || #node.NodeTable.InTriggers == 0) && node.NodeTable.Run) {
            node.NodeTable.Run(node.Context);
        }
    }

    function Serialize() {
        var tbl = {
            Nodes = { },
        };

        // Serialize nodes
        foreach(var node in this.Nodes) {
            var nodeTbl = {
                Id = node.Id,
                Name = node.Name,
                Inputs = { },
                Position = node.Position,
            };

            // Serialize inputs
            if(node.Inputs)
                foreach(var key, input in node.Inputs) {
                    var connTbl;

                    if(input.Value)
                        connTbl = {
                            Value = input.Value,
                        };
                    else
                        connTbl = {
                            Id = input.Id,
                            Name = input.Name,
                        };

                    nodeTbl.Inputs[key] = connTbl;
                }

            tbl.Nodes[#tbl.Nodes + 1] = nodeTbl;
        }

        return tbl;
    }

    function Deserialize(tbl) {
        this.Nodes = { };
        this.NodesById = { };

        foreach(var node in tbl.Nodes) {
            var nodeTbl = {
                Id = node.Id,
                Name = node.Name,
                Inputs = table.Copy(node.Inputs),
                Outputs = { },
                Position = node.Position,
            };

            nodeTbl.NodeTable = SCRIPTY.Registry.NodesByName[nodeTbl.Name];
            assert(nodeTbl.NodeTable, "No such node " .. nodeTbl.Name);

            this.Nodes[#this.Nodes + 1] = nodeTbl;
            this.NodesById[nodeTbl.Id] = nodeTbl;
        }

        // Build outputs table
        foreach(var node in this.Nodes) {
            if(node.Inputs) {
                foreach(var key, input in node.Inputs) {
                    if(!input.Value) {
                        var otherNode = this.NodesById[input.Id];

                        if(!otherNode.Outputs[input.Name])
                            otherNode.Outputs[input.Name] = { };

                        otherNode.Outputs[input.Name][#otherNode.Outputs[input.Name] + 1] = {
                            Id = node.Id,
                            Name = key,
                        };
                    }
                }
            }
        }
    }

    // Required to use this as a hook identifier.
    function IsValid() {
        return true;
    }
}

/*---------------------------- 
    Node Context
------------------------------*/

/**
    Represents a context of a node in a running graph.
    The context is used to call next nodes and read/modify io values.
*/
class SCRIPTY_NodeContext {
    var Graph;
    var Node;
    var NodeTable;

    var LastExecution = -1;
    var Inputs = { };
    var Outputs = { };

    function this(graph, node) {
        this.Graph = graph;
        this.Node = node;
        this.NodeTable = node.NodeTable;
    }

    function SetInput(name, value) {
        this.Inputs[name] = value;
    }

    function GetInput(name, def) {
        if(!this.Inputs[name])
            return this.NodeTable.Inputs[name].Default ?? def;

        return this.Inputs[name];
    }

    function SetOutput(name, value) {
        this.Outputs[name] = value;
    }

    function GetOutput(name, def) {
        if(!this.Outputs[name])
            return def;

        return this.Outputs[name];
    }

    /**
        Triggers execution output.
    */
    function Trigger(name) {
        this.Graph:TriggerExecutionOutput(this.Node, name);
    }

    function IsValid() {
        return true;
    }
}

/*---------------------------- 
    Building
------------------------------*/

if(CLIENT)
function SCRIPTY.BuildGraph(nodePanels) {
    var graph = SCRIPTY_Graph();

    var lastId = 0;
    var panelIdLookup = { };
    var panelsById = { };

    // Assign ids to nodes

    foreach(var node in nodePanels) {
        if(!panelIdLookup[node]) {
            panelIdLookup[node] = ++lastId;
            panelsById[lastId] = node;
        }
    }

    // Populate node list

    graph.Nodes = { };
    graph.NodesById = { };

    foreach(var node in nodePanels) {
        var nodeTbl = {
            Id = panelIdLookup[node],
            Name = node.NodeTable.Name,
            NodeTable = node.NodeTable,
            Inputs = { },
            Outputs = { },
            Position = { node:GetPos() },
        };

        graph.Nodes[#graph.Nodes + 1] = nodeTbl;
        graph.NodesById[panelIdLookup[node]] = nodeTbl;
    }

    // Update connections

    foreach(var node in nodePanels) {
        var nodeTbl = graph.NodesById[panelIdLookup[node]];

        if(nodeTbl.NodeTable.Inputs) {
            var inputs = table.Copy(nodeTbl.NodeTable.Inputs);

            if(nodeTbl.NodeTable.InTriggers)
                foreach(var name, trigger in nodeTbl.NodeTable.InTriggers)
                    inputs[name] = {
                        Name = trigger.Name,
                        Action = trigger.Action,
                        Execution = true,
                    };

            foreach(var name, value in inputs) {
                var inputIo = node:GetInput(name);

                if(inputIo && inputIo.InputPanel) {
                    var outputIo = inputIo.InputPanel;
                    
                    nodeTbl.Inputs[name] = {
                        Id = panelIdLookup[outputIo.Node],
                        Name = inputIo.InputPanel.Name,
                    };

                    var outputNode = graph.NodesById[panelIdLookup[outputIo.Node]];
                    
                    if(!outputNode.Outputs[outputIo.Name])
                        outputNode.Outputs[outputIo.Name] = { };

                    outputNode.Outputs[outputIo.Name][#outputNode.Outputs[outputIo.Name] + 1] = {
                        Id = nodeTbl.Id,
                        Name = inputIo.Name,
                    };
                }
                else if(inputIo && inputIo.Value) {
                    nodeTbl.Inputs[name] = {
                        Value = inputIo.Value,
                    };
                }
            }
        }
    }

    return graph;
}