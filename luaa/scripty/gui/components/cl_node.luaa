class SCRIPTY_GUI_Node {
    var VisualTree;

    var InputsPanel;
    var OutputsPanel;
    var Selected = false;

    var NodeTable;

    function Init() {  
        this:__this();

        // this:NoClipping(true);
        this:AddTitleBar();
        this:AddIO();
    }

    function Setup(visualTree, nodeName) {
        assert(visualTree, "visualTree is null.");
        assert(nodeName, "nodeName is null.");

        this.VisualTree = visualTree;
        this.NodeTable = SCRIPTY.Registry.NodesByName[nodeName];
        assert(this.NodeTable, "No such node " .. nodeName);

        this.TitleBar.Label:SetText(this.NodeTable.Title);

        if(this.NodeTable.IsEvent) {
            // this:AddInput({
            //     Name = "active",
            //     Label = "Active",
            // });

            this:AddOutput({
                Name = "triggered",
                Label = "Triggered",
                Trigger = true,
                Execution = true,
            });
        }

        if(this.NodeTable.IsRunnable) {
            this:AddInput({
                Name = "run",
                Label = "Run",
                Execution = true,
            });

            this:AddOutput({
                Name = "done",
                Label = "Done",
                Execution = true,
            });
        }

        if(this.NodeTable.Inputs)
            foreach(var key, input in this.NodeTable.Inputs) 
                this:AddInput({
                    Name = key,
                    Label = input.Name,
                });
        
        if(this.NodeTable.Outputs)
            foreach(var key, output in this.NodeTable.Outputs) 
                this:AddOutput({
                    Name = key,
                    Label = output.Name,
                });
    }

    function AddTitleBar() {
        this.TitleBar = this:Add("DPanel");
        this.TitleBar:Dock(TOP);
        this.TitleBar:SetHeight(16);
        this.TitleBar.Paint = (self, w, h) => {
            surface.SetDrawColor(60, 60, 60);
            surface.DrawRect(0, 0, w, h);
        };

        this.TitleBar.Label = this.TitleBar:Add("DLabel");
        this.TitleBar.Label:Dock(FILL);
        this.TitleBar.Label:SetText("Test Node");
        this.TitleBar.Label:DockMargin(4, 1, 0, 0);
        this.TitleBar.Label:SetContentAlignment(4);
        this.TitleBar.Label:SetMouseInputEnabled(false);
        function this.TitleBar.Label:OnFocusChanged(gained) {
            if(gained)
                this:FocusPrevious();
        }

        this.TitleBar.OnMousePressed = (p, key) => {
            this.VisualTree:BeginNodeDrag(this);
        };

        this.TitleBar.OnMouseReleased = (p, key) => {
            this.VisualTree:EndNodeDrag();
        };
    }

    function AddIO() {
        this.InputsPanel = this:Add("Panel");
        this.InputsPanel:DockMargin(0, 2, 0, 0);
        this.InputsPanel:Dock(LEFT);

        this.OutputsPanel = this:Add("Panel");
        this.OutputsPanel:DockMargin(0, 2, 0, 0);
        this.OutputsPanel:Dock(FILL);
    }

    function AddInput(data) {
        var io = this.InputsPanel:Add("SCRIPTY_GUI_NodeIO");
        io:Dock(TOP);
        io:SetupInput();
        io:Setup({
            Node = this,
            Name = data.Name,
            Label = data.Label,
            Trigger = data.Trigger,
            Execution = data.Execution,
        });

        return io;
    }

    function AddOutput(data) {
        var io = this.OutputsPanel:Add("SCRIPTY_GUI_NodeIO");
        io:Dock(TOP);
        io:SetupOutput();
        io:Setup({
            Node = this,
            Label = data.Label,
            Name = data.Name,
            Trigger = data.Trigger,
            Execution = data.Execution,
        });

        return io;
    }

    function GetInput(name) {
        foreach(var input in this.InputsPanel:GetChildren())
            if(input.Name == name)
                return input;
    }

    function GetOutput(name) {
        foreach(var output in this.OutputsPanel:GetChildren())
            if(output.Name == name)
                return output;
    }

    function PerformLayout() {
        this.InputsPanel:SetWidth(this:GetWide() / 2);
    }

    function Paint(w, h) {
        surface.DisableClipping(true);
        DisableClipping(true);

        // Background

        surface.SetDrawColor(30, 30, 30, 240);

        if(this.Selected)
            surface.SetDrawColor(40, 40, 40);

        surface.DrawRect(0, 0, w, h);
    }

    function PaintOver(w, h) {
        surface.SetDrawColor(80, 80, 80);
        surface.DrawOutlinedRect(0, 0, w, h);
    }

    function OnMousePressed() {
        this.VisualTree:OnNodeSelected(this);
    }

}

CSCRIPTY_GUI_Node.__index = null;
derma.DefineControl("SCRIPTY_GUI_Node", "SCRIPTY_GUI_Node",
    CSCRIPTY_GUI_Node, "DPanel");

/*---------------------------- 
    Testing
------------------------------*/

static if(DEBUG) {
    SCRIPTY.OpenMainWindow();
}