class SCRIPTY_GUI_MainWindow {
    var MenuWrapper;
    var DebugMenu;
    var MenuBar;
    var VisualTree;
    var PropertyView;

    var TestGraphName = "test_graph";
    var Paused = false;

    function Init() {  
        this:__this();

        this:SetScaleAndPosition();
        this:MakePopup();

        this:AddMenuWrapper();
        this:RebuildMenuBar();
        this:RegisterMenuHooks();
        this:AddVisualTree();
        this:AddPropertyView();
    }

    function Setup() {
        
    }

    function SetScaleAndPosition() { 
        this:SetSize(1200, 800);
        this:Center();
    }

    function AddMenuWrapper() {
        this.MenuWrapper = this:Add("Panel");
        this.MenuWrapper:DockMargin(-4, -6, -4, 0);
        this.MenuWrapper:Dock(TOP);

        this:RebuildDebugPanel();
    }

    function RebuildDebugPanel() {
        if(IsValid(this.DebugMenu)) {
            this.DebugMenu:Remove();
        }

        this.DebugMenu = this.MenuWrapper:Add("Panel");
        this.DebugMenu:DockMargin(0, 0, 4, 0);
        this.DebugMenu:SetWidth(300);
        function this.DebugMenu.PerformLayout(debugMenu) {
            this.DebugMenu:SetWidth(300);
            this.DebugMenu:SetPos(this.MenuWrapper:GetWide() - 300 - 4, 0);
        }

        if(!SCRIPTY.GraphManager.ServerGraphs[this.TestGraphName]) {
            this:AddDebugButton("icon16/control_play.png", function() {
                print("Building graph");
                var graph = this.VisualTree:BuildExecutableGraph();
                print("Serializing graph");
                var serialized = graph:Serialize();
                print("Sending to server");
                var breakpoints = this.VisualTree.Breakpoints;
                SCRIPTY.Networking.RunGraph(this.TestGraphName, serialized, breakpoints);
            }):SetTooltip("Starts the graph on the server.");
        }
        else {
            this:AddDebugButton("icon16/control_stop.png", function() {
                print("Requesting server to stop the graph");
                SCRIPTY.Networking.StopGraph(this.TestGraphName);
            }):SetTooltip("Stops the graph completly.");

            if(this.Paused)
                this:AddDebugButton("icon16/control_play.png", function() {
                    this:OnGraphResumed(this.TestGraphName);
                    SCRIPTY.Networking.ResumeGraph(this.TestGraphName);
                }):SetTooltip("Resumes the graph.");
            else
                this:AddDebugButton("icon16/control_pause.png", function() {
                    SCRIPTY.Networking.Pause(this.TestGraphName);
                }):SetTooltip("Pauses the graph.");

            if(this.Paused)
                this:AddDebugButton("icon16/arrow_right.png", function() {
                    this:OnGraphResumed(this.TestGraphName);
                    SCRIPTY.Networking.DoSingleStep(this.TestGraphName);
                }):SetTooltip("Single step.");
        }
    }

    function AddDebugButton(icon, action) {
        var runButton = this.DebugMenu:Add("DButton");
        runButton:SetText("");
        runButton:Dock(LEFT);
        runButton:SetWidth(24);
        runButton:SetIcon(icon);
        function runButton:Paint(w, h) {
            if(this:IsDown()) {
               surface.SetDrawColor(0, 0, 0, 150);
                surface.DrawRect(0, 0, w, h); 
            }
            else if(this:IsHovered()) {
                surface.SetDrawColor(0, 0, 0, 50);
                surface.DrawRect(0, 0, w, h);
            }
        }
        runButton.DoClick = btn => action(this);

        return runButton;
    }

    function RebuildMenuBar() {
        if(IsValid(this.MenuBar))
            this.MenuBar:Remove();

        this.MenuBar = this.MenuWrapper:Add("DMenuBar");
        this.MenuBar:SetZPos(-1);
        this.MenuBar:Dock(FILL);

        // Script menu

        var scriptMenu = this.MenuBar:AddMenu("Script");

        scriptMenu:AddOption("New script", function() {
            this.VisualTree:Clear();
        }):SetIcon("icon16/page_add.png");

        // Debug menu

        var debugMenu = this.MenuBar:AddMenu("Debug");

        debugMenu:AddOption("Run clientside", function() {
            print("Building graph");
            var graph = this.VisualTree:BuildExecutableGraph();
            print("Serializing graph");
            var serialized = graph:Serialize();
            PrintTable(serialized);
            print("Deserializing graph");
            var deserialized = SCRIPTY_Graph();
            deserialized:Deserialize(serialized);
            print("Running graph");
            deserialized:Run();
        }):SetIcon("icon16/control_play.png");

        if(!SCRIPTY.GraphManager.ServerGraphs[this.TestGraphName]) {
            debugMenu:AddOption("Run serverside", function() {
                print("Building graph");
                var graph = this.VisualTree:BuildExecutableGraph();
                print("Serializing graph");
                var serialized = graph:Serialize();
                print("Sending to server");
                SCRIPTY.Networking.RunGraph(this.TestGraphName, serialized);
            }):SetIcon("icon16/control_play.png");
        }
        else {
            debugMenu:AddOption("Stop serverside", function() {
                print("Requesting server to stop the graph");
                SCRIPTY.Networking.StopGraph(this.TestGraphName);
            }):SetIcon("icon16/control_stop.png");
        }
    }

    function RegisterMenuHooks() {
        hook.Add("SCRIPTY_OnServerGraphStarted", "SCRIPTY_Editor_OnServerGraphStarted", function(name) {
            if(name == this.TestGraphName) {
                this.Paused = false;
                this.VisualTree:ClearBreakpointHits();
            }

            this:RebuildMenuBar();
            this:RebuildDebugPanel();
        });

        hook.Add("SCRIPTY_OnServerGraphStopped", "SCRIPTY_Editor_OnServerGraphStopped", function(name) {
            this:RebuildMenuBar();
            this:RebuildDebugPanel();

            if(name == this.TestGraphName)
                this.VisualTree:ClearBreakpointHits();
        });
    }

    function AddVisualTree() {
        this.VisualTree = this:Add("SCRIPTY_GUI_VisualTree");
        this.VisualTree:Setup(this);
        this.VisualTree:Dock(FILL);
        this.VisualTree:DockMargin(0, 3, 0, 0);
    }

    function AddPropertyView() {
        this.PropertyView = this:Add("SCRIPTY_GUI_PropertyView");
        this.PropertyView:Dock(RIGHT);
        this.PropertyView:SetWidth(300);
    }

    /*---------------------------- 
        Events
    ------------------------------*/

    function OnBreakpointHit(graphName, nodeId) {
        if(graphName == this.TestGraphName) {
            this.Paused = true;

            this:RebuildMenuBar();
            this:RebuildDebugPanel();
        }

        this.VisualTree:OnBreakpointHit(graphName, nodeId);
    }

    function OnGraphResumed(graphName) {
        if(graphName == this.TestGraphName) {
            this.Paused = false;
            this:RebuildMenuBar();
            this:RebuildDebugPanel();

            this.VisualTree:ClearBreakpointHits();
        }
    }
}

CSCRIPTY_GUI_MainWindow.__index = null;
derma.DefineControl("SCRIPTY_GUI_MainWindow", "SCRIPTY_GUI_MainWindow",
    CSCRIPTY_GUI_MainWindow, "DFrame");

/*---------------------------- 
    Opening the menu
------------------------------*/

if(IsValid(SCRIPTY_MainWindow))
    SCRIPTY_MainWindow:Remove();

function SCRIPTY.OpenMainWindow() {
    if(IsValid(SCRIPTY_MainWindow))
        SCRIPTY_MainWindow:Remove();


    SCRIPTY_MainWindow = RACING2.VguiCreate("SCRIPTY_GUI_MainWindow");
    SCRIPTY_MainWindow:Setup();
}

/*---------------------------- 
    Testing
------------------------------*/

static if(DEBUG) {
    SCRIPTY.OpenMainWindow();
}